"""Utilities for group selection functionality."""

from typing import Optional

from aiogram import Bot
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from services.group_tracker import GroupTracker
from services.chat_manager import ChatManager


async def send_group_selection_message(
    bot: Bot,
    chat_id: int,
    group_tracker: GroupTracker,
    chat_manager: ChatManager,
    current_group_id: Optional[int] = None,
    current_group_title: Optional[str] = None,
    notification_mode: bool = False,
) -> None:
    """Send group selection message with keyboard.

    Args:
        bot: Bot instance
        chat_id: Chat ID to send message to
        group_tracker: Group tracker instance
        current_group_id: Current group ID (if command used in group)
        current_group_title: Current group title (if command used in group)
        notification_mode: True if this is a notification about new group
    """
    # Get all tracked groups
    groups = group_tracker.get_groups()

    # Build keyboard
    keyboard_buttons = []

    # Add buttons for each tracked group
    for group_id, group_info in groups.items():
        button_text = f"üìç {group_info['title']}"
        keyboard_buttons.append(
            [
                InlineKeyboardButton(
                    text=button_text, callback_data=f"select_group:{group_id}"
                )
            ]
        )

    # Add current group if provided and not in list
    if current_group_id and current_group_id not in groups:
        keyboard_buttons.append(
            [
                InlineKeyboardButton(
                    text=f"‚ûï {current_group_title or '–¢–µ–∫—É—â–∞—è –≥—Ä—É–ø–ø–∞'}",
                    callback_data=f"select_group:{current_group_id}",
                )
            ]
        )

    # Add cancel button
    keyboard_buttons.append(
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_group_selection")]
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

    # Build status text
    selected_group_id = chat_manager.target_group_chat_id

    if notification_mode:
        # Special text for notification about new group
        newest_group = list(groups.items())[-1] if groups else None
        status_text = "üÜï **–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É!**\n\n"
        if newest_group:
            status_text += f"–ì—Ä—É–ø–ø–∞: **{newest_group[1]['title']}**\n"
            status_text += f"ID: `{newest_group[0]}`\n\n"
        status_text += "–ë–æ—Ç –ø–æ–∫–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã.\n\n"
        if groups:
            status_text += "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n"
            for gid, info in groups.items():
                status_text += f"‚Ä¢ {info['title']} (ID: {gid})\n"
            status_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏:"
        else:
            status_text += (
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_group —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏."
            )
    else:
        # Regular selection mode
        status_text = "ü§ñ **–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏**\n\n"

        if selected_group_id:
            # Try to get group info
            group_info = group_tracker.get_group_info(selected_group_id)  # type: ignore
            if group_info:
                status_text += f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ—Ä–∏—Ä—É–µ–º–∞—è –≥—Ä—É–ø–ø–∞: **{group_info['title']}** (ID: `{selected_group_id}`)\n\n"
            else:
                status_text += (
                    f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ—Ä–∏—Ä—É–µ–º–∞—è –≥—Ä—É–ø–ø–∞ ID: `{selected_group_id}`\n\n"
                )
        else:
            status_text += "–ú–æ–¥–µ—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏.\n\n"

        if groups:
            status_text += "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –∏–∑ —Å–ø–∏—Å–∫–∞:"
        else:
            status_text += "–ë–æ—Ç –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∏ –≤ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É.\n"
            status_text += "–î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–∞–º –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."

    await bot.send_message(
        chat_id=chat_id, text=status_text, reply_markup=keyboard, parse_mode="Markdown"
    )


def format_group_list(groups: dict) -> str:
    """Format groups dictionary to readable list.

    Args:
        groups: Dictionary of groups

    Returns:
        Formatted string with group list
    """
    if not groups:
        return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø"

    groups_list = ""
    for group_id, info in groups.items():
        groups_list += f"‚Ä¢ {info['title']} (ID: {group_id})\n"

    return groups_list
