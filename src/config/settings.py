"""Configuration settings for the bot."""

from typing import Dict, List

from pydantic_settings import BaseSettings, SettingsConfigDict

from exceptions import ConfigError
from utils.logger import logger


class Settings(BaseSettings):
    """Application settings with validation."""
    
    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        case_sensitive=True,
        extra="ignore"
    )
    
    # Telegram configuration
    TELEGRAM_BOT_TOKEN: str
    
    # Superuser configuration
    SUPERUSER_ID: int
    
    # Gemini configuration
    GEMINI_API_KEY: str
    GEMINI_MODEL: str = "gemma-3n-e4b-it"
    
    # Groq configuration
    GROQ_API_KEY: str = ""
    GROQ_MODEL: str = "llama-3.3-70b-versatile"
    
    # AI provider selection
    AI_PROVIDER: str = "gemini"  # "gemini" or "groq"
    
    # Optional configuration with defaults
    VIOLATION_TIME_WINDOW: int = 60
    VIOLATION_MAX_LENGTH: int = 10
    RESET_ON_TOPIC_MOVE: bool = True
    MIN_MESSAGE_LENGTH: int = 10
    REACTION_EMOJI: str = "üëæ"
    
    # Static configuration - topics and reaction levels
    @property
    def chat_topics(self) -> Dict[str, str]:
        """Chat topics configuration."""
        return {
            "–û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç": "–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –±–µ–∑ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–æ–π —Ç–µ–º–∞—Ç–∏–∫–∏. –í —ç—Ç–æ–π –≤–µ—Ç–∫–µ –º–æ–∂–µ—Ç –æ–±—Å—É–∂–¥–∞—Ç—å—Å—è –≤—Å–µ —Ç–æ–∂–µ —á—Ç–æ –∏ –≤ –¥—Ä—É–≥–∏—Ö, –∫—Ä–æ–º–µ –ë–ü –∏ —à–º–æ—Ç–æ–∫.",
            "–†–µ–π—Ç": """
            –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –≤ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤—ã—Ö –ø–∞—Ä—Ç–∏—è—Ö –Ω–∞ –ª–∞–¥–¥–µ—Ä–µ –∏—Ä–∏ –Ω–∞ –∞—Ä–µ–Ω–µ (–ù–∞–ø—Ä–∏–º–µ—Ä: –ö—Ç–æ –Ω–∞ –∞—Ä–µ–Ω–µ? –Ø –¥–∞–ª—å—à–µ –∞—Ä–µ–Ω—É). 
            –°–±–æ—Ä –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π –∏–≥—Ä—ã (–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–¥—ë–º –∫–æ–Ω–µ—á–Ω–æ!, ). 
            –û–±—Å—É–∂–¥–µ–Ω–∏–µ —Ç–∞–∫—Ç–∏–∫–∏ –Ω–∞ –ø—Ä–µ–¥—Å—Ç–æ—è—â—É—é –∏–≥—Ä—É. 
            –û–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π –∏–≥—Ä—ã. 
            –í–æ–∑–º–æ–∂–Ω–æ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–≥—Ä–µ (–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Ä–≥–Ω—É–ª–æ!, –ë–ª—è –∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã!, –£ –º–µ–Ω—è –∑–∞–≤–∏—Å–ª–æ.) 
            """,
            "–®–º–æ—Ç–∫–∏": "–û–±—Å—É–∂–¥–µ–Ω–∏–µ –≤–µ—â–µ–π, —Å—ç—Ç–æ–≤",
            "–°—Ç–∏–∫–µ—Ä—ã": "–ü—Ä–æ—Å—å–±—ã –æ –ø–æ–º–æ—â–∏, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
            "–ö–∞–∫–æ–π –ë–ü": """
            –û–±—Å—É–∂–¥–µ–Ω–∏–µ –±–æ–µ–≤–æ–≥–æ –ø—Ä–æ–ø—É—Å–∫–∞ (–ë–ü). 
            –°–∫–æ–ª—å–∫–æ –æ—á–∫–æ–≤ –ë–ü –Ω–∞–±—Ä–∞–Ω–æ, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –Ω–∞–±—Ä–∞—Ç—å. –°—Ä–æ–∫–∏ –ø–æ –µ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—é.
            –®–º–æ—Ç–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–∞–ª–∏ –≤ –ë–ü.
            """,
            "–ë–∏–ª–¥—ã": "–û–±—Å—É–∂–¥–µ–Ω–∏—è –∏ –≤–∏–¥–µ–æ –±–∏–ª–¥–æ–≤",
            "–ó–∞–ø–∏—Å–∏ –∏–≥—Ä": "–ó–∞–ø–∏—Å–∏ –∏–≥—Ä –∏ —Å–∫–∏—Ä–Ω—à–æ—Ç—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π"
            
        }
    
    @property
    def reaction_levels(self) -> Dict[int, str]:
        """Reaction intensity configuration."""
        return {
            1: "reaction_only",
            2: "reaction_only", 
            3: "reaction_only",
            4: "reaction_only",
            5: "reaction_only",
            6: "reaction_only",
            7: "reaction_only",
        }
    
    @property
    def analyze_keywords(self) -> List[str]:
        """Keywords for message analysis."""
        return ["–≤–æ–ø—Ä–æ—Å", "–ø–æ–º–æ–≥–∏", "–æ–±—ä—è—Å–Ω–∏", "—á—Ç–æ —Ç–∞–∫–æ–µ", "–∫–∞–∫", "–ø–æ—á–µ–º—É", "?"]


# Create settings instance with validation
try:
    settings = Settings()
    # Log configuration at startup
    logger.info("Configuration loaded successfully")
    logger.debug(f"MIN_MESSAGE_LENGTH: {settings.MIN_MESSAGE_LENGTH}")
    logger.debug(f"REACTION_EMOJI: {settings.REACTION_EMOJI}")
except Exception as e:
    raise ConfigError(f"Failed to load configuration: {e}")
